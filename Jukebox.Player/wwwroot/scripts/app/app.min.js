/// <reference path="_all.ts" />
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        'use strict';
        var RootController = (function () {
            function RootController($rootScope, $state, $uibModal, authService, jukeboxServiceUrls, jukeboxWebPaths, jukeboxViewPaths) {
                var _this = this;
                this.$rootScope = $rootScope;
                this.$state = $state;
                this.$uibModal = $uibModal;
                this.authService = authService;
                this.jukeboxServiceUrls = jukeboxServiceUrls;
                this.jukeboxWebPaths = jukeboxWebPaths;
                this.jukeboxViewPaths = jukeboxViewPaths;
                this.redirectedToLogin = false;
                this.onNewUrlState = function (e, toState, toParams, fromState, fromParams) {
                    if (!_this.authService.authentication.isAuth
                        && !_this.redirectedToLogin
                        && toState.name != _this.jukeboxWebPaths.accountLogin.state
                        && toState.name != _this.jukeboxWebPaths.accountRegister.state) {
                        e.preventDefault();
                        _this.redirectToLogin();
                    }
                    else {
                        _this.showLogout = true;
                    }
                };
                $rootScope.controller = this;
                this.cofigureAuthService();
                this.configureUnauthenticatedRedirect($rootScope);
            }
            RootController.prototype.logOut = function () {
                this.authService.logOut();
                // this.redirectToLogin();
            };
            RootController.prototype.errorMessage = function (message, time, errorList) {
                if (errorList === void 0) { errorList = null; }
                var modalInstance = this.$uibModal.open({
                    animation: true,
                    templateUrl: this.jukeboxViewPaths.error,
                    controller: 'errorController',
                    size: 'md',
                    resolve: {
                        message: function () {
                            return message;
                        },
                        time: function () {
                            return time;
                        },
                        errorList: function () {
                            return errorList ? errorList : [];
                        }
                    }
                });
            };
            RootController.prototype.hasRemoteTokenRequestFailed = function (rejection) {
                return rejection.status === 400
                    && rejection.config.url == this.jukeboxServiceUrls.authenticationServiceUrl
                    && this.$state.current.name != this.jukeboxWebPaths.accountLogin.state;
            };
            ;
            RootController.prototype.isPasswordSending = function (rejection) {
                return rejection.config.url == this.jukeboxServiceUrls.authenticationServiceUrl
                    && this.$state.current.name == this.jukeboxWebPaths.accountLogin.state;
            };
            RootController.prototype.redirectToLogin = function () {
                var _this = this;
                this.$state.go(this.jukeboxWebPaths.accountLogin.state);
                this.redirectedToLogin = true;
                setTimeout(function () {
                    _this.redirectedToLogin = false;
                }, 200);
            };
            RootController.prototype.cofigureAuthService = function () {
                this.authService.fillAuthData();
            };
            RootController.prototype.configureUnauthenticatedRedirect = function ($rootScope) {
                $rootScope.$on('$stateChangeStart', this.onNewUrlState);
            };
            return RootController;
        }());
        Player.RootController = RootController;
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

/// <reference path="../_all.ts" />
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Configurations;
        (function (Configurations) {
            'use strict';
            //TODO: find interface
            function configureLoadingBar(cfpLoadingBarProvider) {
                cfpLoadingBarProvider.includeSpinner = false;
            }
            Configurations.configureLoadingBar = configureLoadingBar;
        })(Configurations = Player.Configurations || (Player.Configurations = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

/// <reference path="../_all.ts" />
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Configurations;
        (function (Configurations) {
            'use strict';
            function confugreInterceptoprs($httpProvider) {
                $httpProvider.interceptors.push(Player.Services.AuthInterceptorService.Factory);
            }
            Configurations.confugreInterceptoprs = confugreInterceptoprs;
        })(Configurations = Player.Configurations || (Player.Configurations = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

/// <reference path="../_all.ts" />
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Configurations;
        (function (Configurations) {
            'use strict';
            function configureRouting($stateProvider, $urlRouterProvider, $locationProvider, jukeboxWebPaths, jukeboxViewPaths, jukeboxServiceUrls) {
                $stateProvider.state(jukeboxWebPaths.home.state, {
                    url: jukeboxWebPaths.home.url,
                    controller: "homeController",
                    templateUrl: jukeboxViewPaths.home
                });
                $stateProvider.state(jukeboxWebPaths.accountLogin.state, {
                    url: jukeboxWebPaths.accountLogin.url,
                    controller: "loginController",
                    templateUrl: jukeboxViewPaths.accountLogin
                });
                $urlRouterProvider.otherwise(jukeboxWebPaths.home.url);
                // use the HTML5 History API
                $locationProvider.html5Mode({
                    enabled: false,
                    requireBase: true
                });
            }
            Configurations.configureRouting = configureRouting;
        })(Configurations = Player.Configurations || (Player.Configurations = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

/// <reference path="../_all.ts" />
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Configurations;
        (function (Configurations) {
            'use strict';
            function configureLocalStorage(localStorageServiceProvider) {
                localStorageServiceProvider
                    .setPrefix('jukebox-web')
                    .setStorageType('localStorage');
            }
            Configurations.configureLocalStorage = configureLocalStorage;
        })(Configurations = Player.Configurations || (Player.Configurations = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Constants;
        (function (Constants) {
            'use strict';
            var UrlState = (function () {
                function UrlState() {
                }
                return UrlState;
            }());
            Constants.UrlState = UrlState;
            var JukeboxWebPaths = (function () {
                function JukeboxWebPaths() {
                    this.accountLogin = { url: '/login', state: 'login' };
                    this.accountRegister = { url: '/register', state: 'register' };
                    this.home = { url: '/home', state: 'home' };
                }
                return JukeboxWebPaths;
            }());
            Constants.JukeboxWebPaths = JukeboxWebPaths;
            var JukeboxViewPaths = (function () {
                function JukeboxViewPaths() {
                    this.shared = { modal: './views/shared/modalTemplate.html' };
                    this.accountLogin = './views/account/login.html';
                    this.accountRegister = './views/account/register.html';
                    this.home = './views/home.html';
                    this.error = './views/error.html';
                }
                return JukeboxViewPaths;
            }());
            Constants.JukeboxViewPaths = JukeboxViewPaths;
            var SharedViewPaths = (function () {
                function SharedViewPaths() {
                }
                return SharedViewPaths;
            }());
            Constants.SharedViewPaths = SharedViewPaths;
        })(Constants = Player.Constants || (Player.Constants = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

/// <reference path="../_all.ts" />
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Constants;
        (function (Constants) {
            'use strict';
            var JukeboxSettings = (function () {
                function JukeboxSettings() {
                    this.clientId = '2261c0d1-3e69-4275-ad9a-3ab15bab0e3c';
                }
                return JukeboxSettings;
            }());
            Constants.JukeboxSettings = JukeboxSettings;
        })(Constants = Player.Constants || (Player.Constants = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

/// <reference path="../_all.ts" />
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Controllers;
        (function (Controllers) {
            'use strict';
            var IndexController = (function () {
                function IndexController($scope, $state, authService, jukeboxWebPaths) {
                    this.$scope = $scope;
                    this.$state = $state;
                    this.authService = authService;
                    this.jukeboxWebPaths = jukeboxWebPaths;
                    $scope.viewModel = this;
                    this.authentication = authService.authentication;
                }
                IndexController.prototype.redirectToLogin = function () {
                    this.authService.logOut();
                    // this.$state.go(this.jukeboxWebPaths.accountLogin.state);
                };
                IndexController.$inject = ['$scope', '$state', 'authService', 'jukeboxWebPaths'];
                return IndexController;
            }());
            Controllers.IndexController = IndexController;
        })(Controllers = Player.Controllers || (Player.Controllers = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

/// <reference path="../_all.ts" />
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Controllers;
        (function (Controllers) {
            'use strict';
            var HomeController = (function () {
                function HomeController($rootScope, $scope, $http, $state, jukeboxWebPaths, jukeboxServiceUrls, Hub, $uibModal, hubService, authService) {
                    var _this = this;
                    this.$rootScope = $rootScope;
                    this.$scope = $scope;
                    this.$http = $http;
                    this.$state = $state;
                    this.jukeboxWebPaths = jukeboxWebPaths;
                    this.jukeboxServiceUrls = jukeboxServiceUrls;
                    this.Hub = Hub;
                    this.$uibModal = $uibModal;
                    this.hubService = hubService;
                    this.authService = authService;
                    this.handlePlay = function (audio_url) {
                        _this.audio = new Audio(audio_url);
                        _this.audio.play();
                    };
                    this.handlePause = function (secondPlayer) {
                        _this.audio.pause();
                    };
                    $scope.controller = this;
                    this.createUsersHub();
                }
                HomeController.prototype.createUsersHub = function () {
                    var _this = this;
                    this.usersHub = this.hubService.startHub("UsersListHub", {
                        rootPath: this.jukeboxServiceUrls.authenticationServiceUrl + "/signalr",
                        logging: false,
                        listeners: {
                            'handlePlay': this.handlePlay,
                            'handlePause': this.handlePause
                        }
                    });
                    this.$scope.$on('$stateChangeStart', function () {
                        _this.usersHub.disconnect();
                    });
                };
                HomeController.$inject = ['$rootScope', '$scope', '$http', '$state', 'jukeboxWebPaths', 'jukeboxServiceUrls', 'Hub', '$uibModal', 'hubService', 'authService'];
                return HomeController;
            }());
            Controllers.HomeController = HomeController;
        })(Controllers = Player.Controllers || (Player.Controllers = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

/// <reference path="../../_all.ts" />
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Controllers;
        (function (Controllers) {
            var Account;
            (function (Account) {
                'use strict';
                var LoginController = (function () {
                    function LoginController($scope, $state, authService, jukeboxWebPaths) {
                        var _this = this;
                        this.$scope = $scope;
                        this.$state = $state;
                        this.authService = authService;
                        this.jukeboxWebPaths = jukeboxWebPaths;
                        this.onLoginSucccess = function (response) {
                            _this.$state.go(_this.jukeboxWebPaths.home.state);
                        };
                        this.onLoginFail = function (response) {
                            if (response.data) {
                                _this.errorMessage = response.data.error;
                            }
                            _this.loginData.password = '';
                        };
                        $scope.controller = this;
                        this.errorMessage = "";
                        this.loginData = {
                            userName: "",
                            password: "",
                            rememberMe: ""
                        };
                        this.val = {
                            usernameMinLength: 3,
                            usernameMaxLength: 100,
                            passwordMinLength: 6,
                            passwordMaxLength: 100
                        };
                        this.login();
                    }
                    LoginController.prototype.login = function () {
                        this.errorMessage = "";
                        this.loginData.userName = "raspberry";
                        this.loginData.password = "raspberry";
                        this.authService.login(this.loginData).then(this.onLoginSucccess, this.onLoginFail);
                    };
                    LoginController.$inject = ['$scope', '$state', 'authService', 'jukeboxWebPaths'];
                    return LoginController;
                }());
                Account.LoginController = LoginController;
            })(Account = Controllers.Account || (Controllers.Account = {}));
        })(Controllers = Player.Controllers || (Player.Controllers = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Filters;
        (function (Filters) {
            'use strict';
            //TODO: refactor
            function stringFormat() {
                var s = arguments[0];
                for (var i = 0; i < arguments.length - 1; i++) {
                    var reg = new RegExp("\\{" + i + "\\}", "gm");
                    s = s.replace(reg, arguments[i + 1]);
                }
                return s;
            }
            Filters.stringFormat = stringFormat;
            ;
        })(Filters = Player.Filters || (Player.Filters = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Models;
        (function (Models) {
            var Account;
            (function (Account) {
                'use strict';
                var LoginData = (function () {
                    function LoginData() {
                    }
                    return LoginData;
                }());
                Account.LoginData = LoginData;
                var UserCreateModel = (function () {
                    function UserCreateModel() {
                    }
                    return UserCreateModel;
                }());
                Account.UserCreateModel = UserCreateModel;
                var LoginValidation = (function () {
                    function LoginValidation() {
                    }
                    return LoginValidation;
                }());
                Account.LoginValidation = LoginValidation;
                var Authentication = (function () {
                    function Authentication() {
                    }
                    return Authentication;
                }());
                Account.Authentication = Authentication;
                var AuthorizedData = (function () {
                    function AuthorizedData() {
                    }
                    return AuthorizedData;
                }());
                Account.AuthorizedData = AuthorizedData;
                var UserListModel = (function () {
                    function UserListModel() {
                    }
                    return UserListModel;
                }());
                Account.UserListModel = UserListModel;
                var UserGameModel = (function () {
                    function UserGameModel() {
                    }
                    return UserGameModel;
                }());
                Account.UserGameModel = UserGameModel;
            })(Account = Models.Account || (Models.Account = {}));
        })(Models = Player.Models || (Player.Models = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Models;
        (function (Models) {
            var Misc;
            (function (Misc) {
                'use strict';
                var ErrorModel = (function () {
                    function ErrorModel(message, errorList) {
                        this.message = message;
                        this.errorList = errorList;
                    }
                    return ErrorModel;
                }());
                Misc.ErrorModel = ErrorModel;
            })(Misc = Models.Misc || (Models.Misc = {}));
        })(Models = Player.Models || (Player.Models = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

/// <reference path="../_all.ts" />
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Services;
        (function (Services) {
            'use strict';
            var AuthInterceptorService = (function () {
                function AuthInterceptorService($q, $rootScope, $injector, localStorageService, jukeboxWebPaths) {
                    var _this = this;
                    this.$q = $q;
                    this.$rootScope = $rootScope;
                    this.$injector = $injector;
                    this.localStorageService = localStorageService;
                    this.jukeboxWebPaths = jukeboxWebPaths;
                    this.request = function (config) {
                        config.headers = config.headers || {};
                        var authData = _this.getAuthService().authorizationData.getData();
                        if (authData) {
                            config.headers['Authorization'] = 'Bearer ' + authData.access_token;
                        }
                        return config;
                    };
                    this.responseError = function (rejection) {
                        if (rejection.status === 401 || _this.$rootScope.controller.hasRemoteTokenRequestFailed(rejection)) {
                        }
                        return _this.$q.reject(rejection);
                    };
                }
                AuthInterceptorService.Factory = function ($q, $rootScope, $injector, localStorageService, jukeboxWebPaths) {
                    return new AuthInterceptorService($q, $rootScope, $injector, localStorageService, jukeboxWebPaths);
                };
                AuthInterceptorService.prototype.retryRequest = function (config, deferred) {
                    function successCallback(response) {
                        deferred.resolve(response);
                    }
                    function errorCallback(response) {
                        deferred.reject(response);
                    }
                    this.get$http()(config).then(successCallback, errorCallback);
                };
                AuthInterceptorService.prototype.get$http = function () {
                    return this.$injector.get('$http');
                };
                AuthInterceptorService.prototype.getAuthService = function () {
                    return this.$injector.get('authService');
                };
                AuthInterceptorService.prototype.get$state = function () {
                    return this.$injector.get('$state');
                };
                AuthInterceptorService.$inject = ['$q', '$rootScope', '$injector', 'localStorageService', 'jukeboxWebPaths'];
                AuthInterceptorService.TOKEN_HEADERS = { 'Content-Type': 'application/x-www-form-urlencoded' };
                return AuthInterceptorService;
            }());
            Services.AuthInterceptorService = AuthInterceptorService;
        })(Services = Player.Services || (Player.Services = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

/// <reference path="../_all.ts" />
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Services;
        (function (Services) {
            'use strict';
            var AuthService = (function () {
                function AuthService($http, $q, localStorageService, jukeboxServiceUrls, jukeboxSettings) {
                    var _this = this;
                    this.$http = $http;
                    this.$q = $q;
                    this.localStorageService = localStorageService;
                    this.jukeboxServiceUrls = jukeboxServiceUrls;
                    this.jukeboxSettings = jukeboxSettings;
                    this.onLoginSuccess = function (response) {
                        response.user_name = _this.loginData.userName;
                        _this.authorizationData.setData(response);
                        _this.authentication.isAuth = true;
                        _this.authentication.userName = _this.loginData.userName;
                        _this.authentication.useRefreshTokens = false;
                        return response;
                    };
                    this.onLoginFail = function (response) {
                        _this.logOut();
                        return null;
                    };
                    this.authorizationData = new AuthorizationData(localStorageService);
                    this.authentication = new Player.Models.Account.Authentication();
                }
                AuthService.prototype.login = function (loginData) {
                    this.loginData = loginData;
                    var data = "grant_type=password&username=" + loginData.userName + "&password=" + loginData.password + "&client_id=" + this.jukeboxSettings.clientId;
                    return this.$http.post(this.jukeboxServiceUrls.authenticationServiceUrl, data, { headers: AuthService.TOKEN_HEADERS })
                        .success(this.onLoginSuccess)
                        .error(this.onLoginFail);
                };
                AuthService.prototype.register = function (user) {
                    return this.$http.post(this.jukeboxServiceUrls.authenticationServiceUrl + "/api/users", user);
                };
                AuthService.prototype.logOut = function () {
                    this.authorizationData.removeData();
                    this.authentication.isAuth = false;
                    this.authentication.userName = "";
                    this.authentication.useRefreshTokens = false;
                };
                AuthService.prototype.fillAuthData = function () {
                    var authData = this.authorizationData.getData();
                    if (authData) {
                        this.authentication.isAuth = true;
                        this.authentication.userName = authData.user_name;
                        this.authentication.useRefreshTokens = true;
                    }
                };
                AuthService.$inject = ['$http', '$q', 'localStorageService', 'jukeboxServiceUrls', 'jukeboxSettings'];
                AuthService.TOKEN_HEADERS = { 'Content-Type': 'application/x-www-form-urlencoded' };
                return AuthService;
            }());
            Services.AuthService = AuthService;
            var AuthorizationData = (function () {
                function AuthorizationData(localStorageService) {
                    this.localStorageService = localStorageService;
                }
                AuthorizationData.prototype.getData = function () {
                    return this.localStorageService.get(AuthorizationData.AUTH_DATA_KEY);
                };
                AuthorizationData.prototype.setData = function (data) {
                    this.localStorageService.set(AuthorizationData.AUTH_DATA_KEY, data);
                };
                AuthorizationData.prototype.removeData = function () {
                    this.localStorageService.remove(AuthorizationData.AUTH_DATA_KEY);
                };
                AuthorizationData.AUTH_DATA_KEY = 'authorizationData';
                return AuthorizationData;
            }());
        })(Services = Player.Services || (Player.Services = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

/// <reference path="../_all.ts" />
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Services;
        (function (Services) {
            'use strict';
            var HubService = (function () {
                function HubService($state, jukeboxWebPaths, authService, Hub) {
                    var _this = this;
                    this.$state = $state;
                    this.jukeboxWebPaths = jukeboxWebPaths;
                    this.authService = authService;
                    this.Hub = Hub;
                    this.hasConnectFailed = false;
                    this.onHubConnectSuccess = function (response) {
                        console.log('Now connected, connection ID=' + _this.hub.connection.id);
                    };
                    this.onHubConnectFail = function (promise) {
                        if (promise.context.status == 401) {
                            _this.redirectToLogin();
                        }
                        console.log('Could not connect');
                    };
                }
                HubService.prototype.startHub = function (hubName, options) {
                    var authData = this.authService.authorizationData.getData();
                    var accessToken = authData != null ? authData.access_token : null;
                    if (!options.queryParams) {
                        options.queryParams = {};
                    }
                    options.queryParams['access_token'] = "Bearer " + accessToken;
                    this.hub = new this.Hub(hubName, options);
                    this.createHub();
                    return this.hub;
                };
                HubService.prototype.createHub = function () {
                    this.hub.connect();
                    this.hub.connection.start()
                        .done(this.onHubConnectSuccess)
                        .fail(this.onHubConnectFail);
                };
                HubService.prototype.redirectToLogin = function () {
                    //this.$state.go(this.jukeboxWebPaths.accountLogin.state);
                };
                HubService.$inject = ['$state', 'jukeboxWebPaths', 'authService', 'Hub'];
                return HubService;
            }());
            Services.HubService = HubService;
        })(Services = Player.Services || (Player.Services = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

/// <reference path="../tools/typings/jquery/jquery.d.ts" />
/// <reference path="../tools/typings/angularjs/angular.d.ts" />
/// <reference path="../tools/typings/angularjs/angular-ui-bootstrap.d.ts" />
/// <reference path="../tools/typings/angularjs/angular-ui-router.d.ts" />
/// <reference path="../tools/typings/angularjs/angular-local-storage.d.ts" />
/// <reference path="../tools/typings/angularjs/angular-loading-bar.d.ts" />
/// <reference path="../tools/typings/ladda/ladda.d.ts" />
/// <reference path="../tools/typings/signalr/signalr.d.ts" />
/// <reference path="../tools/typings/angular-signalr-hub/angular-signalr-hub.d.ts" />
/// <reference path="../tools/typings/custom/serviceUrlConstants.d.ts" />
/// <reference path="app.ts" />
/// <reference path="rootController.ts" />
/// <reference path="configurations/applicationConfiguration.ts" />
/// <reference path="configurations/interceptorsConfiguration.ts" />
/// <reference path="configurations/routeConfiguration.ts" />
/// <reference path="configurations/storageConfiguration.ts" />
/// <reference path="constants/applicationConstants.ts" />
/// <reference path="constants/settingsConstants.ts" />
/// <reference path="controllers/indexController.ts" />
/// <reference path="controllers/homeController.ts" />
/// <reference path="controllers/account/loginController.ts" />
/// <reference path="filters/stringFormat.ts" />
/// <reference path="models/account.ts" />
/// <reference path="models/misc.ts" />
/// <reference path="services/authInterceptorService.ts" />
/// <reference path="services/authService.ts" />
/// <reference path="services/hubService.ts" /> 

/// <reference path="_all.ts" />
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        'use strict';
        var Configurations = Jukebox.Player.Configurations;
        var Constants = Jukebox.Player.Constants;
        var Controllers = Jukebox.Player.Controllers;
        var Filters = Jukebox.Player.Filters;
        var Services = Jukebox.Player.Services;
        var app = angular.module('jukebox-web', ['ui.router', 'LocalStorageModule', 'angular-loading-bar', 'jukebox-web-service-url', 'ui.bootstrap', 'ng-file-model', 'SignalR'])
            .constant('jukeboxWebPaths', new Constants.JukeboxWebPaths())
            .constant('jukeboxViewPaths', new Constants.JukeboxViewPaths())
            .constant('jukeboxSettings', new Constants.JukeboxSettings())
            .filter('stringFormat', Filters.stringFormat)
            .service('authService', Services.AuthService)
            .service('hubService', Services.HubService)
            .controller("homeController", Controllers.HomeController)
            .controller("indexController", Controllers.IndexController)
            .controller("loginController", Controllers.Account.LoginController)
            .config(['cfpLoadingBarProvider', Configurations.configureLoadingBar])
            .config(['$httpProvider', Configurations.confugreInterceptoprs])
            .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', 'jukeboxWebPaths', 'jukeboxViewPaths', 'jukeboxServiceUrls', Configurations.configureRouting])
            .config(['localStorageServiceProvider', Configurations.configureLocalStorage])
            .run(function ($rootScope, $state, $uibModal, authService, jukeboxServiceUrls, jukeboxWebPaths, jukeboxViewPaths) {
            return initialize($rootScope, $state, $uibModal, authService, jukeboxServiceUrls, jukeboxWebPaths, jukeboxViewPaths);
        });
        function initialize($rootScope, $state, $uibModal, authService, jukeboxServiceUrls, jukeboxWebPaths, jukeboxViewPaths) {
            $rootScope.controller = new Player.RootController($rootScope, $state, $uibModal, authService, jukeboxServiceUrls, jukeboxWebPaths, jukeboxViewPaths);
        }
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Jukebox;
(function (Jukebox) {
    var Player;
    (function (Player) {
        var Models;
        (function (Models) {
            var Error;
            (function (Error) {
                'use strict';
                var BaseApiError = (function () {
                    function BaseApiError() {
                    }
                    return BaseApiError;
                }());
                Error.BaseApiError = BaseApiError;
                var BadRequestApiError = (function (_super) {
                    __extends(BadRequestApiError, _super);
                    function BadRequestApiError() {
                        _super.apply(this, arguments);
                    }
                    return BadRequestApiError;
                }(BaseApiError));
                Error.BadRequestApiError = BadRequestApiError;
                var AuthError = (function () {
                    function AuthError() {
                    }
                    return AuthError;
                }());
                Error.AuthError = AuthError;
                var BadRequest = (function () {
                    function BadRequest() {
                    }
                    return BadRequest;
                }());
            })(Error = Models.Error || (Models.Error = {}));
        })(Models = Player.Models || (Player.Models = {}));
    })(Player = Jukebox.Player || (Jukebox.Player = {}));
})(Jukebox || (Jukebox = {}));

//# sourceMappingURL=app.min.js.map
